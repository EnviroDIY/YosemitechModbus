{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "classyosemitech",
    "name": "yosemitech",
    "url_base": "classyosemitech",
    "url": "classyosemitech.html",
    "include": [
      "&lt;src/YosemitechModbus.h&gt;",
      "_yosemitech_modbus_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The class for communication with Yosemitech sensors via modbus.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [],
    "public_funcs": [
      {
        "base_url": "classyosemitech.html",
        "id": "a02e33210e0c0fdba5e1ce74be2931e5c",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "begin",
        "brief": "This function sets up the communication.",
        "description": "<p>It should be run during the arduino &quot;setup&quot; function. The &quot;stream&quot; device must be initialized prior to running this.</p>",
        "return_value": "True if the starting communication was successful, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "model",
            "type": "<a href=\"_yosemitech_modbus_8h.html#a517840e9a91335c992f33b700dc42ba2\" class=\"m-doc\">yosemitechModel</a>",
            "type_name": "<a href=\"_yosemitech_modbus_8h.html#a517840e9a91335c992f33b700dc42ba2\" class=\"m-doc\">yosemitechModel</a> model",
            "default": null,
            "description": "The model of the Yosemitech sensor, from <a href=\"_yosemitech_modbus_8h.html#a517840e9a91335c992f33b700dc42ba2\" class=\"m-doc\">yosemitechModel</a>",
            "direction": ""
          },
          {
            "name": "modbusSlaveID",
            "type": "byte",
            "type_name": "byte modbusSlaveID",
            "default": null,
            "description": "The byte identifier of the modbus slave device.",
            "direction": ""
          },
          {
            "name": "stream",
            "type": "Stream*",
            "type_name": "Stream* stream",
            "default": null,
            "description": "A pointer to the Arduino stream object to communicate with.",
            "direction": ""
          },
          {
            "name": "enablePin",
            "type": "int",
            "type_name": "int enablePin",
            "default": "-1",
            "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply. Optional with a default value of -1.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classyosemitech.html",
        "id": "ae7b0773df684326570ed82bf24521438",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "begin",
        "brief": "This function sets up the communication.",
        "description": "<p>It should be run during the arduino &quot;setup&quot; function. The &quot;stream&quot; device must be initialized prior to running this.</p>",
        "return_value": "True if the starting communication was successful, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "model",
            "type": "<a href=\"_yosemitech_modbus_8h.html#a517840e9a91335c992f33b700dc42ba2\" class=\"m-doc\">yosemitechModel</a>",
            "type_name": "<a href=\"_yosemitech_modbus_8h.html#a517840e9a91335c992f33b700dc42ba2\" class=\"m-doc\">yosemitechModel</a> model",
            "default": null,
            "description": "The model of the Yosemitech sensor, from <a href=\"_yosemitech_modbus_8h.html#a517840e9a91335c992f33b700dc42ba2\" class=\"m-doc\">yosemitechModel</a>",
            "direction": ""
          },
          {
            "name": "modbusSlaveID",
            "type": "byte",
            "type_name": "byte modbusSlaveID",
            "default": null,
            "description": "The byte identifier of the modbus slave device.",
            "direction": ""
          },
          {
            "name": "stream",
            "type": "Stream&amp;",
            "type_name": "Stream&amp; stream",
            "default": null,
            "description": "A reference to the Arduino stream object to communicate with.",
            "direction": ""
          },
          {
            "name": "enablePin",
            "type": "int",
            "type_name": "int enablePin",
            "default": "-1",
            "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply. Optional with a default value of -1.",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [
      {
        "name": "Functions to get and set sensor addresses and metadata",
        "id": "functions-to-get-and-set-sensor-addresses-and-metadata",
        "description": "<p><a name=\"metadata_fxns\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a2fd1e8d6ed2430d44204459a5b54518a",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getModel",
              "brief": "Returns a pretty string with the model information.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is only based on the model input from the &quot;begin&quot; fxn. The sensor itself does not return its model information.</p></aside>",
              "return_value": "The Yosemitech sensor model",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "afd92ac5738b591ea85c0e188ec7a70eb",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getParameter",
              "brief": "Returns a pretty string with the parameter measured.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is only based on the model input from the &quot;begin&quot; fxn. The sensor itself does not return this information.</p></aside>",
              "return_value": "The primary parameter being measured on this Yosemitech sensor model.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a1c6ee3e6515bac147a6015eec37bf5a2",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getUnits",
              "brief": "Returns a pretty string with the measurement units.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is only based on the model input from the &quot;begin&quot; fxn. The sensor itself does not return this information.</p></aside>",
              "return_value": "The units of primary parameter being measured on this Yosemitech sensor model.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "ae15fbd9cb04bc7e2c502ae57d2f3c94d",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "getSlaveID",
              "brief": "Gets the modbus slave ID.",
              "description": "<p>Not supported by many sensors.</p>",
              "return_value": "The slave ID of the Yosemitech sensor",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "ad6157a85bdc645170eea9748b60db4b7",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setSlaveID",
              "brief": "Sets a new modbus slave ID.",
              "description": "",
              "return_value": "True if the slave ID was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "newSlaveID",
                  "type": "byte",
                  "type_name": "byte newSlaveID",
                  "default": null,
                  "description": "The new slave ID for the Yosemitech sensor",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a58153edb680b7f5fb3ee26b2adb2cd6d",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getSerialNumber",
              "brief": "Gets the instrument serial number as a String.",
              "description": "",
              "return_value": "The serial number of the Yosemitech sensor",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "ad6e6b1465f4cd7ba0937dc8d7e0e67fc",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getVersion",
              "brief": "Gets the hardware and software version of the sensor.",
              "description": "<p>The float variables for the hardware and software versions must be initialized prior to calling this function.</p><p>The reference (&amp;) is needed when declaring this function so that the function is able to modify the actual input floats rather than create and destroy copies of them.</p><p>There is no need to add the &amp; when actually using the function.</p>",
              "return_value": "True if the hardware and software versions were successfully updated, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "hardwareVersion",
                  "type": "float&amp;",
                  "type_name": "float&amp; hardwareVersion",
                  "default": null,
                  "description": "A reference to a float object to be modified with the hardware version.",
                  "direction": ""
                },
                {
                  "name": "softwareVersion",
                  "type": "float&amp;",
                  "type_name": "float&amp; softwareVersion",
                  "default": null,
                  "description": "A reference to a float object to be modified with the software version.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to start and stop measurements",
        "id": "functions-to-start-and-stop-measurements",
        "description": "<p><a name=\"measurement_fxns\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a7b81cfc96ba27aba9300c54906267ce9",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "startMeasurement",
              "brief": "Tells the optical sensors to begin taking measurements.",
              "description": "",
              "return_value": "True if the measurements were successfully started, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "aeb6208b483890e6c3c2394e37d3ab403",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "stopMeasurement",
              "brief": "Tells the optical sensors to stop taking measurements.",
              "description": "",
              "return_value": "True if the measurements were successfully started, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get one or more values from a sensor.",
        "id": "functions-to-get-one-or-more-values-from-a-sensor",
        "description": "<p><a name=\"value_fetching\"></a></p><p>The float variables for value1 and value2 and the byte for the error code must be initialized prior to calling this function.</p><p>This function is overloaded so you have the option of getting: 1 value - This will be only the parameter value 1 value and an error code - Parameter value and the error code</p><p>2 values - This will be the parameter and the temperature, with the parameter first and the temperature second 2 values and an error code - As two values, but with error code</p><p>3 values - The parameter, the temperature, and a third value for the sensors that return can return something else &ndash; Y532 (pH) can return electrical potential &ndash; Y551 (COD) can return turbidity &ndash; Y560 (Ammonium) returns NH4_N (mg/L) and pH as primary parameters, but can return more. &ndash; Y504 (DO) allows calculation of DO in mg/L, which can be returned 3 values and an error code - As three values, but with error code</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The one, two, and three value variants will simply return false for a multiparameter sonde</p></aside><p>8 values - For sondes Y4000 and Y560.</p><ul><li>Y4000 Sonde returns in this order: &quot;DO; Turb; Cond; pH; Temp; ORP;\n         Chl; BGA&quot;</li><li>Y560 Ammonium returns these groupings of parameters:<ul><li>pH, pH_potential (mV)</li><li>NH4+_potential (mV), K_potential (mV)</li><li>NH4_N, NH4+, K+ (all in mg/L)</li><li>Temperature (C) 8 values and an error code - As 8 values, but with error code</li></ul></li></ul><aside class=\"m-note m-info\"><h4>Note</h4><p>The 8 value versions will return false for anything but a sonde</p></aside>",
        "members": [
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "ae6ec9df15d2445a8ebbef71552b5d8d8",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getValues",
              "brief": "Gets values back from the sensor.",
              "description": "<aside class=\"m-note m-default\"><h4>See also</h4><p>value_fetching</p></aside>",
              "return_value": "True if the measurements were successfully obtained, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "parmValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; parmValue",
                  "default": null,
                  "description": "A float to replace with the first parameter value from the sensor.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a598944ad19cbc4b990a7cb261d02108a",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getValues",
              "brief": "Gets values back from the sensor.",
              "description": "<aside class=\"m-note m-default\"><h4>See also</h4><p>value_fetching</p></aside>",
              "return_value": "True if the measurements were successfully obtained, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "parmValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; parmValue",
                  "default": null,
                  "description": "A float to replace with the first parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "errorCode",
                  "type": "byte&amp;",
                  "type_name": "byte&amp; errorCode",
                  "default": null,
                  "description": "A byte to replace with the error code from the measurement.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "aab7efbba00d4a7d028bdc0a0f94e7826",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getValues",
              "brief": "Gets values back from the sensor.",
              "description": "<aside class=\"m-note m-default\"><h4>See also</h4><p>value_fetching</p></aside>",
              "return_value": "True if the measurements were successfully obtained, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "parmValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; parmValue",
                  "default": null,
                  "description": "A float to replace with the first parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "tempValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; tempValue",
                  "default": null,
                  "description": "A float to replace with the temperature parameter value from the sensor.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a546149af9d14dac466a66e22d4453e3e",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getValues",
              "brief": "Gets values back from the sensor.",
              "description": "<aside class=\"m-note m-default\"><h4>See also</h4><p>value_fetching</p></aside>",
              "return_value": "True if the measurements were successfully obtained, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "parmValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; parmValue",
                  "default": null,
                  "description": "A float to replace with the first parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "tempValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; tempValue",
                  "default": null,
                  "description": "A float to replace with the temperature parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "errorCode",
                  "type": "byte&amp;",
                  "type_name": "byte&amp; errorCode",
                  "default": null,
                  "description": "A byte to replace with the error code from the measurement.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "abdad57592b6a1e38466b4df2b82d8a41",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getValues",
              "brief": "Gets values back from the sensor.",
              "description": "<aside class=\"m-note m-default\"><h4>See also</h4><p>value_fetching</p></aside>",
              "return_value": "True if the measurements were successfully obtained, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "parmValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; parmValue",
                  "default": null,
                  "description": "A float to replace with the first parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "tempValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; tempValue",
                  "default": null,
                  "description": "A float to replace with the temperature parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "thirdValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; thirdValue",
                  "default": null,
                  "description": "A float to replace with the third parameter value from the sensor, if applicable.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a0d63b192b49a6e1eefb7f8a8a1874777",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getValues",
              "brief": "Gets values back from the sensor.",
              "description": "<aside class=\"m-note m-default\"><h4>See also</h4><p>value_fetching</p></aside>",
              "return_value": "True if the measurements were successfully obtained, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "parmValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; parmValue",
                  "default": null,
                  "description": "A float to replace with the first parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "tempValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; tempValue",
                  "default": null,
                  "description": "A float to replace with the temperature parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "thirdValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; thirdValue",
                  "default": null,
                  "description": "A float to replace with the third parameter value from the sensor, if applicable.",
                  "direction": ""
                },
                {
                  "name": "errorCode",
                  "type": "byte&amp;",
                  "type_name": "byte&amp; errorCode",
                  "default": null,
                  "description": "A byte to replace with the error code from the measurement.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a5c75872326d332e3be3d38badced7f27",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getValues",
              "brief": "Gets values back from a multi-parameter sonde.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This will return false for anything but a sonde</p></aside>",
              "return_value": "True if the measurements were successfully obtained, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "firstValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; firstValue",
                  "default": null,
                  "description": "A float to replace with the first parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "secondValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; secondValue",
                  "default": null,
                  "description": "A float to replace with the second parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "thirdValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; thirdValue",
                  "default": null,
                  "description": "A float to replace with the third parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "forthValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; forthValue",
                  "default": null,
                  "description": "A float to replace with the fourth parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "fifthValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; fifthValue",
                  "default": null,
                  "description": "A float to replace with the fifth parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "sixthValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; sixthValue",
                  "default": null,
                  "description": "A float to replace with the sixth parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "seventhValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; seventhValue",
                  "default": null,
                  "description": "A float to replace with the seventh parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "eighthValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; eighthValue",
                  "default": null,
                  "description": "A float to replace with the eighth parameter value from the sensor.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a2c7b25ee2ac68b56557f211e1adffc75",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getValues",
              "brief": "Gets values back from a multi-parameter sonde.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This will return false for anything but a sonde</p></aside>",
              "return_value": "True if the measurements were successfully obtained, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "firstValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; firstValue",
                  "default": null,
                  "description": "A float to replace with the first parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "secondValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; secondValue",
                  "default": null,
                  "description": "A float to replace with the second parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "thirdValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; thirdValue",
                  "default": null,
                  "description": "A float to replace with the third parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "forthValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; forthValue",
                  "default": null,
                  "description": "A float to replace with the fourth parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "fifthValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; fifthValue",
                  "default": null,
                  "description": "A float to replace with the fifth parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "sixthValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; sixthValue",
                  "default": null,
                  "description": "A float to replace with the sixth parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "seventhValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; seventhValue",
                  "default": null,
                  "description": "A float to replace with the seventh parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "eighthValue",
                  "type": "float&amp;",
                  "type_name": "float&amp; eighthValue",
                  "default": null,
                  "description": "A float to replace with the eighth parameter value from the sensor.",
                  "direction": ""
                },
                {
                  "name": "errorCode",
                  "type": "byte&amp;",
                  "type_name": "byte&amp; errorCode",
                  "default": null,
                  "description": "A byte to replace with the error code from the measurement.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get single values from a sensor",
        "id": "functions-to-get-single-values-from-a-sensor",
        "description": "<p><a name=\"single_values\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a4d3553f389c0b4121e977954a17cf4ca",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getValue",
              "brief": "Gets the main &quot;parameter&quot; value as a float.",
              "description": "<p>This is overloaded, so you have the option of getting the error code in another pre-initialized variable, if you want it and the sensor supports it.</p>",
              "return_value": "The main &quot;parameter&quot; value as a float",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "ab7b3f756409c1965672b61693f10684f",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getValue",
              "brief": "Gets the main &quot;parameter&quot; value as a float.",
              "description": "",
              "return_value": "The main &quot;parameter&quot; value as a float",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "errorCode",
                  "type": "byte&amp;",
                  "type_name": "byte&amp; errorCode",
                  "default": null,
                  "description": "A byte to replace with the error code from the measurement.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a405fed178365417b41c053aba96e6177",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getTemperatureValue",
              "brief": "Returns the temperatures value from a sensor as a float.",
              "description": "",
              "return_value": "The temperature value as a float",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "abc58e0d32d46e5a7e55a12ccc0072abb",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getPotentialValue",
              "brief": "Returns raw electrical potential value from the sensor as a float.",
              "description": "<p>This only applies to pH</p>",
              "return_value": "The raw electrical potential value as a float",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a53948e1617a2bddabfc1ed9d5faabf5a",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getDOmgLValue",
              "brief": "Returns DO in mg/L (instead of % saturation) as a float.",
              "description": "<p>This only applies to DO and is calculated in the <a href=\"#ae6ec9df15d2445a8ebbef71552b5d8d8\" class=\"m-doc\">getValues()</a> equation using the measured temperature and a salinity of 0 and pressure of 760 mmHg (sea level)</p>",
              "return_value": "The dissolved oxygen value as a float",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions get and set sensor calibrations",
        "id": "functions-get-and-set-sensor-calibrations",
        "description": "<p><a name=\"calibrations\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "add1417f27c23204658975ddd5399a5a8",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getCalibration",
              "brief": "Gets the calibration constants for the sensor.",
              "description": "<p>The float variables must be initialized prior to calling this function. MOST sensors have two calibration coefficients: K = slope, B = intercept The calibration is applied to all values returned by the sensor as: value_returned = (value_raw * K) + B</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This should <strong>NOT</strong> be used with the pH sensor.</p></aside>",
              "return_value": "True if floats were successfully replaced with the calibration information, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "K",
                  "type": "float&amp;",
                  "type_name": "float&amp; K",
                  "default": null,
                  "description": "A float to replace with the first calibration constant - K = slope.",
                  "direction": ""
                },
                {
                  "name": "B",
                  "type": "float&amp;",
                  "type_name": "float&amp; B",
                  "default": null,
                  "description": "A float to replace with the second calibration constant - B = intercept.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "ad61f12f06c838c3379c695cc99fd1130",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getCalibration",
              "brief": "Gets all six calibration constants for a pH sensor.",
              "description": "<p>The pH sensor uses SIX calibration coefficients Factory calibration values for pH are: K1=6.86, K2=-6.72, K3=0.04, K4=6.86, K5=-6.56, K6=-1.04</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This only applies to the pH sensor!</p></aside>",
              "return_value": "True if floats were successfully replaced with the calibration information, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "K1",
                  "type": "float&amp;",
                  "type_name": "float&amp; K1",
                  "default": null,
                  "description": "A float to replace with the first calibration constant.",
                  "direction": ""
                },
                {
                  "name": "K2",
                  "type": "float&amp;",
                  "type_name": "float&amp; K2",
                  "default": null,
                  "description": "A float to replace with the second calibration constant.",
                  "direction": ""
                },
                {
                  "name": "K3",
                  "type": "float&amp;",
                  "type_name": "float&amp; K3",
                  "default": null,
                  "description": "A float to replace with the third calibration constant.",
                  "direction": ""
                },
                {
                  "name": "K4",
                  "type": "float&amp;",
                  "type_name": "float&amp; K4",
                  "default": null,
                  "description": "A float to replace with the fourth calibration constant.",
                  "direction": ""
                },
                {
                  "name": "K5",
                  "type": "float&amp;",
                  "type_name": "float&amp; K5",
                  "default": null,
                  "description": "A float to replace with the fifth calibration constant.",
                  "direction": ""
                },
                {
                  "name": "K6",
                  "type": "float&amp;",
                  "type_name": "float&amp; K6",
                  "default": null,
                  "description": "A float to replace with the sixth calibration constant.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "aef70a3ec6f758d75d8d86bb54d5447a8",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setCalibration",
              "brief": "Sets the calibration constants for a sensor.",
              "description": "<p>The suggested calibration protocol for sensors with a 2-coefficient calibration is:</p><ol><li>Use this command to set calibration coefficients as K = 1 and B = 0</li><li>Put the probe in a solution of known value.</li><li>Send the &quot;startMeasurement&quot; command and allow the probe to stabilize.</li><li>Send the &quot;getValue&quot; command to get the returned parameter value. (Depending on the sensor, you may want to take multiple values and average them.)</li><li>Ideally, repeat steps 2-4 in multiple standard solutions</li><li>Calculate the slope (K) and offset (B) between the known values for the standard solutions and the values returned by the sensor. (x - values from sensor, y = values of standard solutions)</li><li>Send the calculated slope (K) and offset (B) to the sensor using this command.</li></ol><p>The pH sensor can be calibrated in this fashion, or it can be calibrated using the steps detailed below for the functions pHCalibrationPoint and pHCalibrationStatus.</p>",
              "return_value": "True if the calibration was successfully set; false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "K",
                  "type": "float",
                  "type_name": "float K",
                  "default": null,
                  "description": "The calibration slope",
                  "direction": ""
                },
                {
                  "name": "B",
                  "type": "float",
                  "type_name": "float B",
                  "default": null,
                  "description": "The calibration intercept",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a775e1d55a21a76c2f4340b0359cf55c1",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setCalibration",
              "brief": "Sets the FULL calibration constants for a pH sensor, which requires 6 coefficients.",
              "description": "<p>Factory calibration values for pH are: K1=6.86, K2=-6.72, K3=0.04, K4=6.86, K5=-6.56, K6=-1.04.</p><p>Use the functions <a href=\"#a44057fcacdb1015219c95df609ac494b\" class=\"m-doc\">yosemitech::<wbr />pHCalibrationPoint(float pH)</a> and <a href=\"#a93c3eec2ce56171d32d03e59f0db7122\" class=\"m-doc\">yosemitech::<wbr />pHCalibrationStatus()</a> to calibrate and verify calibrations of these meters</p>",
              "return_value": "True if the calibration was successfully set; false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "K1",
                  "type": "float",
                  "type_name": "float K1",
                  "default": null,
                  "description": "The first calibration constant.",
                  "direction": ""
                },
                {
                  "name": "K2",
                  "type": "float",
                  "type_name": "float K2",
                  "default": null,
                  "description": "The second calibration constant.",
                  "direction": ""
                },
                {
                  "name": "K3",
                  "type": "float",
                  "type_name": "float K3",
                  "default": null,
                  "description": "The third calibration constant.",
                  "direction": ""
                },
                {
                  "name": "K4",
                  "type": "float",
                  "type_name": "float K4",
                  "default": null,
                  "description": "The fourth calibration constant.",
                  "direction": ""
                },
                {
                  "name": "K5",
                  "type": "float",
                  "type_name": "float K5",
                  "default": null,
                  "description": "The fifth calibration constant.",
                  "direction": ""
                },
                {
                  "name": "K6",
                  "type": "float",
                  "type_name": "float K6",
                  "default": null,
                  "description": "The sixth calibration constant.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a44057fcacdb1015219c95df609ac494b",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "pHCalibrationPoint",
              "brief": "Sets the 3 calibration points for a pH sensor.",
              "description": "<p>Calibration steps for pH (3 point calibration only):</p><ol><li>Put sensor in solution and allow to stabilize for 1 minute</li><li>Input value of calibration standard (ie, run command pHCalibrationPoint(pH))</li><li>Repeat for points 2 and 3 (pH of 4.00, 6.86, and 9.18 recommended)</li><li>Read calibration status</li></ol>",
              "return_value": "True if the calibration point was accepted; false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "pH",
                  "type": "float",
                  "type_name": "float pH",
                  "default": null,
                  "description": "The pH of the current calibration solution.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a93c3eec2ce56171d32d03e59f0db7122",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "pHCalibrationStatus",
              "brief": "Verifies the success of a calibration for a pH sensor.",
              "description": "<p>Return values: 0x00 - Success 0x01 - Non-matching calibration standards 0x02 - Less than 3 points used in calibration 0x04 - Calibration coefficients out of range</p>",
              "return_value": "A byte with the calibration status.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a8138a0fcda5bf6f48f88adb55d2dc762",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setCapCoefficients",
              "brief": "Sets the cap coefficients constants for a sensor.",
              "description": "<p>This only applies to dissolved oxygen sensors. The sensor caps should be replaced yearly or as the readings become unstable. The values of these coefficients are supplied by the manufacturer.</p>",
              "return_value": "True if the coefficients were accepted; false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "K0",
                  "type": "float",
                  "type_name": "float K0",
                  "default": null,
                  "description": "The zero-th DO cap coefficient.",
                  "direction": ""
                },
                {
                  "name": "K1",
                  "type": "float",
                  "type_name": "float K1",
                  "default": null,
                  "description": "The first DO cap coefficient.",
                  "direction": ""
                },
                {
                  "name": "K2",
                  "type": "float",
                  "type_name": "float K2",
                  "default": null,
                  "description": "The second DO cap coefficient.",
                  "direction": ""
                },
                {
                  "name": "K3",
                  "type": "float",
                  "type_name": "float K3",
                  "default": null,
                  "description": "The third DO cap coefficient.",
                  "direction": ""
                },
                {
                  "name": "K4",
                  "type": "float",
                  "type_name": "float K4",
                  "default": null,
                  "description": "The fourth DO cap coefficient.",
                  "direction": ""
                },
                {
                  "name": "K5",
                  "type": "float",
                  "type_name": "float K5",
                  "default": null,
                  "description": "The fifth DO cap coefficient.",
                  "direction": ""
                },
                {
                  "name": "K6",
                  "type": "float",
                  "type_name": "float K6",
                  "default": null,
                  "description": "The sixth DO cap coefficient.",
                  "direction": ""
                },
                {
                  "name": "K7",
                  "type": "float",
                  "type_name": "float K7",
                  "default": null,
                  "description": "The seventh DO cap coefficient.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions for sensor brushes",
        "id": "functions-for-sensor-brushes",
        "description": "<p><a name=\"brushing\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "aeec61628b9b08dc2a58ac88169878209",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "activateBrush",
              "brief": "Immediately activates the cleaning brush for sensors with one.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>The brush also activates as soon as power is applied.</p><p>One cleaning sweep with the brush takes about 10 seconds.</p><p>Brushing commands will only work on turbidity sensors with hardware Rev1.0 and software Rev1.7 or later</p></aside>",
              "return_value": "True if the brush was activated; false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "ae365f9ac4a6e78e7194fcac57643f46a",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setBrushInterval",
              "brief": "Sets the brush interval - that is, how frequently the brush will run if power is continuously applied to the sensor.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>Brushing commands will only work on turbidity sensors with hardware Rev1.0 and software Rev1.7 or later</p></aside>",
              "return_value": "True if the brushing interval was successfully set; false if not",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "intervalMinutes",
                  "type": "uint16_t",
                  "type_name": "uint16_t intervalMinutes",
                  "default": null,
                  "description": "The brushing interval in minutes",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a3cfda31e4de143d3627eaf9ae6f4a6e5",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "getBrushInterval",
              "brief": "Returns the brushing interval - that is, how frequently the brush will run if power is continuously applied to the sensor.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>Brushing commands will only work on turbidity sensors with hardware Rev1.0 and software Rev1.7 or later</p></aside>",
              "return_value": "The brushing interval in minutes",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Debugging functions",
        "id": "debugging-functions",
        "description": "<p><a name=\"debugging\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a5afd84124e07053dfcbd23231e5d3d4a",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setDebugStream",
              "brief": "Set a stream for debugging information to go to.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "An Arduino stream object",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "a555e2c72d79bbb4ecce2afe19292c985",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setDebugStream",
              "brief": "Set a stream for debugging information to go to.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "An Arduino stream object",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classyosemitech.html",
              "id": "af7e33da2498d7bebec4693fd00622832",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "stopDebugging",
              "brief": "Un-set the stream for debugging information to go to; stop debugging.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      }
    ],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "yosemitech",
        "classyosemitech.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "yosemitech",
        "classyosemitech.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "yosemitech::<wbr />"
  }
}